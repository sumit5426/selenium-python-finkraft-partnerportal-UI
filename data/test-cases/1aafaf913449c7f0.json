{"uid":"1aafaf913449c7f0","name":"contains filter functionality","fullName":"src.tests.test_04_flight.TestFlights#test_filters_in_tables","historyId":"4c7a9928f78bc80a401190bf79cd4102","time":{"start":1756130338992,"stop":1756130370681,"duration":31689},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=139.0.7258.127)\nStacktrace:\n#0 0x5653bbda601a <unknown>\n#1 0x5653bb8458c3 <unknown>\n#2 0x5653bb88de7e <unknown>\n#3 0x5653bb8bd3e2 <unknown>\n#4 0x5653bb88b49a <unknown>\n#5 0x5653bb8bd5ae <unknown>\n#6 0x5653bb8e314f <unknown>\n#7 0x5653bb8bd1b3 <unknown>\n#8 0x5653bb88959b <unknown>\n#9 0x5653bb88a971 <unknown>\n#10 0x5653bbd6b1eb <unknown>\n#11 0x5653bbd6ef39 <unknown>\n#12 0x5653bbd522c9 <unknown>\n#13 0x5653bbd6fae8 <unknown>\n#14 0x5653bbd36baf <unknown>\n#15 0x5653bbd930a8 <unknown>\n#16 0x5653bbd93286 <unknown>\n#17 0x5653bbda4ff6 <unknown>\n#18 0x7f79aa69caa4 <unknown>\n#19 0x7f79aa729c3c <unknown>","statusTrace":"self = <tests.test_04_flight.TestFlights object at 0x7f83423d43d0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ae599a84ce8f45cf4592ac528171f42a\")>\nconfig = {'browser': 'chrome', 'client': 'MMT', 'env': 'QA', 'execution': 'local', ...}\n\n    @allure.title(\"contains filter functionality\")\n    @pytest.mark.smoke\n    def test_filters_in_tables(self, driver, config):\n        login_page = LoginPage(driver)\n        dashboard = login_page.login(config[\"username\"], config[\"password\"])\n        flight_page = dashboard.go_to_flight_page()\n        # Skip if no headings present\n        if not flight_page.has_table_headings():\n            pytest.skip(\"No table headings; nothing to toggle.\")\n        # Open the column selector panel\n        flight_page.open_column_selector_filter(toggle_index=1)\n        toggles = flight_page.get_filter_toggles()\n        assert toggles, \"No filter toggles found!\"\n        for idx, toggle in enumerate(toggles):\n            flight_page.expand_toggle(toggle)\n>           flight_page.get_inputs_under_toggle(toggle,idx)\n\nsrc/tests/test_04_flight.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/pages/flight_page.py:232: in get_inputs_under_toggle\n    self.clear_text(self.FILTER_INPUT,index)\nsrc/utils/browser_utility.py:235: in clear_text\n    el.clear()\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:154: in clear\n    self._execute(Command.CLEAR_ELEMENT)\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:448: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f83421f3430>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x5653bbda4ff6 \\\\u003Cunknown>\\\\n#18 0x7f79aa69caa4 \\\\u003Cunknown>\\\\n#19 0x7f79aa729c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=139.0.7258.127)\nE       Stacktrace:\nE       #0 0x5653bbda601a <unknown>\nE       #1 0x5653bb8458c3 <unknown>\nE       #2 0x5653bb88de7e <unknown>\nE       #3 0x5653bb8bd3e2 <unknown>\nE       #4 0x5653bb88b49a <unknown>\nE       #5 0x5653bb8bd5ae <unknown>\nE       #6 0x5653bb8e314f <unknown>\nE       #7 0x5653bb8bd1b3 <unknown>\nE       #8 0x5653bb88959b <unknown>\nE       #9 0x5653bb88a971 <unknown>\nE       #10 0x5653bbd6b1eb <unknown>\nE       #11 0x5653bbd6ef39 <unknown>\nE       #12 0x5653bbd522c9 <unknown>\nE       #13 0x5653bbd6fae8 <unknown>\nE       #14 0x5653bbd36baf <unknown>\nE       #15 0x5653bbd930a8 <unknown>\nE       #16 0x5653bbd93286 <unknown>\nE       #17 0x5653bbda4ff6 <unknown>\nE       #18 0x7f79aa69caa4 <unknown>\nE       #19 0x7f79aa729c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"config","time":{"start":1756129298633,"stop":1756129298638,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1756130335884,"stop":1756130338991,"duration":3107},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=139.0.7258.127)\nStacktrace:\n#0 0x5653bbda601a <unknown>\n#1 0x5653bb8458c3 <unknown>\n#2 0x5653bb88de7e <unknown>\n#3 0x5653bb8bd3e2 <unknown>\n#4 0x5653bb88b49a <unknown>\n#5 0x5653bb8bd5ae <unknown>\n#6 0x5653bb8e314f <unknown>\n#7 0x5653bb8bd1b3 <unknown>\n#8 0x5653bb88959b <unknown>\n#9 0x5653bb88a971 <unknown>\n#10 0x5653bbd6b1eb <unknown>\n#11 0x5653bbd6ef39 <unknown>\n#12 0x5653bbd522c9 <unknown>\n#13 0x5653bbd6fae8 <unknown>\n#14 0x5653bbd36baf <unknown>\n#15 0x5653bbd930a8 <unknown>\n#16 0x5653bbd93286 <unknown>\n#17 0x5653bbda4ff6 <unknown>\n#18 0x7f79aa69caa4 <unknown>\n#19 0x7f79aa729c3c <unknown>","statusTrace":"self = <tests.test_04_flight.TestFlights object at 0x7f83423d43d0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ae599a84ce8f45cf4592ac528171f42a\")>\nconfig = {'browser': 'chrome', 'client': 'MMT', 'env': 'QA', 'execution': 'local', ...}\n\n    @allure.title(\"contains filter functionality\")\n    @pytest.mark.smoke\n    def test_filters_in_tables(self, driver, config):\n        login_page = LoginPage(driver)\n        dashboard = login_page.login(config[\"username\"], config[\"password\"])\n        flight_page = dashboard.go_to_flight_page()\n        # Skip if no headings present\n        if not flight_page.has_table_headings():\n            pytest.skip(\"No table headings; nothing to toggle.\")\n        # Open the column selector panel\n        flight_page.open_column_selector_filter(toggle_index=1)\n        toggles = flight_page.get_filter_toggles()\n        assert toggles, \"No filter toggles found!\"\n        for idx, toggle in enumerate(toggles):\n            flight_page.expand_toggle(toggle)\n>           flight_page.get_inputs_under_toggle(toggle,idx)\n\nsrc/tests/test_04_flight.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/pages/flight_page.py:232: in get_inputs_under_toggle\n    self.clear_text(self.FILTER_INPUT,index)\nsrc/utils/browser_utility.py:235: in clear_text\n    el.clear()\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:154: in clear\n    self._execute(Command.CLEAR_ELEMENT)\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:448: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f83421f3430>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x5653bbda4ff6 \\\\u003Cunknown>\\\\n#18 0x7f79aa69caa4 \\\\u003Cunknown>\\\\n#19 0x7f79aa729c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=139.0.7258.127)\nE       Stacktrace:\nE       #0 0x5653bbda601a <unknown>\nE       #1 0x5653bb8458c3 <unknown>\nE       #2 0x5653bb88de7e <unknown>\nE       #3 0x5653bb8bd3e2 <unknown>\nE       #4 0x5653bb88b49a <unknown>\nE       #5 0x5653bb8bd5ae <unknown>\nE       #6 0x5653bb8e314f <unknown>\nE       #7 0x5653bb8bd1b3 <unknown>\nE       #8 0x5653bb88959b <unknown>\nE       #9 0x5653bb88a971 <unknown>\nE       #10 0x5653bbd6b1eb <unknown>\nE       #11 0x5653bbd6ef39 <unknown>\nE       #12 0x5653bbd522c9 <unknown>\nE       #13 0x5653bbd6fae8 <unknown>\nE       #14 0x5653bbd36baf <unknown>\nE       #15 0x5653bbd930a8 <unknown>\nE       #16 0x5653bbd93286 <unknown>\nE       #17 0x5653bbda4ff6 <unknown>\nE       #18 0x7f79aa69caa4 <unknown>\nE       #19 0x7f79aa729c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementNotInteractableException","steps":[{"name":"Enter email and password and click Sign In.","time":{"start":1756130338993,"stop":1756130350225,"duration":11232},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"username","value":"'sumit@kgrp.in'"},{"name":"password","value":"'HRzyUJi0'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"4895738bfb33b4b4","name":"test_filters_in_tables_2025-08-25_13-59-30.png","source":"4895738bfb33b4b4.png","type":"image/png","size":28112}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1756130370906,"stop":1756130370980,"duration":74},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"smoke"},{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"src.tests"},{"name":"suite","value":"test_04_flight"},{"name":"subSuite","value":"TestFlights"},{"name":"host","value":"pkrvmqc4gcfdwos"},{"name":"thread","value":"2246-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"src.tests.test_04_flight"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":["broken"],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":1,"passed":0,"unknown":0,"total":2},"items":[{"uid":"4a3d88addac6c016","status":"skipped","statusDetails":"Skipped: all filter functionality not implemented","time":{"start":1754371793880,"stop":1754371793880,"duration":0}}]},"tags":["smoke"]},"source":"1aafaf913449c7f0.json","parameterValues":[]}