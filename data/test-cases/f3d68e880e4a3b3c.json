{"uid":"f3d68e880e4a3b3c","name":"test_toggle_buttons_expand_and_collapse[airline]","fullName":"src.tests.test_03_credentials.TestCredentials#test_toggle_buttons_expand_and_collapse","historyId":"4fedea57c69f1220832899049570bfa8","time":{"start":1756129924429,"stop":1756129949091,"duration":24662},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=139.0.7258.127)\nStacktrace:\n#0 0x56093755301a <unknown>\n#1 0x560936ff28c3 <unknown>\n#2 0x560937045b1e <unknown>\n#3 0x560937038b1b <unknown>\n#4 0x56093706a3e2 <unknown>\n#5 0x56093703849a <unknown>\n#6 0x56093706a5ae <unknown>\n#7 0x56093709014f <unknown>\n#8 0x56093706a1b3 <unknown>\n#9 0x56093703659b <unknown>\n#10 0x560937037971 <unknown>\n#11 0x5609375181eb <unknown>\n#12 0x56093751bf39 <unknown>\n#13 0x5609374ff2c9 <unknown>\n#14 0x56093751cae8 <unknown>\n#15 0x5609374e3baf <unknown>\n#16 0x5609375400a8 <unknown>\n#17 0x560937540286 <unknown>\n#18 0x560937551ff6 <unknown>\n#19 0x7fa1b669caa4 <unknown>\n#20 0x7fa1b6729c3c <unknown>","statusTrace":"self = <tests.test_03_credentials.TestCredentials object at 0x7f83422cdf10>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ac61a742ad1af7a8d0849defedafdf8c\")>\nconfig = {'browser': 'chrome', 'client': 'MMT', 'env': 'QA', 'execution': 'local', ...}\nmodule = 'airline'\n\n    @pytest.mark.parametrize(\"module\", [\"gst\", \"airline\", \"email\"])\n    @pytest.mark.smoke\n    def test_toggle_buttons_expand_and_collapse(self, driver, config, module):\n        login_page = LoginPage(driver)\n        dashboard_page = login_page.login(config[\"username\"], config[\"password\"])\n        credentials_page = dashboard_page.go_to_credentials()\n        credentials_page.select_module(module)\n        if not credentials_page.has_table_headings():\n            pytest.skip(f\"No table headings for module '{module}', so no toggle buttons to test.\")\n        count = credentials_page.get_toggle_button_count()\n        if count == 0:\n            pytest.skip(f\"No toggle buttons present for module '{module}'.\")\n        for idx in range(count):\n            # Expand\n>           state = credentials_page.click_toggle_button_and_wait(index=idx, expected_state=\"true\")\n\nsrc/tests/test_03_credentials.py:125: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/pages/credentials_page.py:179: in click_toggle_button_and_wait\n    button.click()\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:448: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f834221e220>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#18 0x560937551ff6 \\\\u003Cunknown>\\\\n#19 0x7fa1b669caa4 \\\\u003Cunknown>\\\\n#20 0x7fa1b6729c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=139.0.7258.127)\nE       Stacktrace:\nE       #0 0x56093755301a <unknown>\nE       #1 0x560936ff28c3 <unknown>\nE       #2 0x560937045b1e <unknown>\nE       #3 0x560937038b1b <unknown>\nE       #4 0x56093706a3e2 <unknown>\nE       #5 0x56093703849a <unknown>\nE       #6 0x56093706a5ae <unknown>\nE       #7 0x56093709014f <unknown>\nE       #8 0x56093706a1b3 <unknown>\nE       #9 0x56093703659b <unknown>\nE       #10 0x560937037971 <unknown>\nE       #11 0x5609375181eb <unknown>\nE       #12 0x56093751bf39 <unknown>\nE       #13 0x5609374ff2c9 <unknown>\nE       #14 0x56093751cae8 <unknown>\nE       #15 0x5609374e3baf <unknown>\nE       #16 0x5609375400a8 <unknown>\nE       #17 0x560937540286 <unknown>\nE       #18 0x560937551ff6 <unknown>\nE       #19 0x7fa1b669caa4 <unknown>\nE       #20 0x7fa1b6729c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"config","time":{"start":1756129298633,"stop":1756129298638,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1756129921795,"stop":1756129924427,"duration":2632},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=139.0.7258.127)\nStacktrace:\n#0 0x56093755301a <unknown>\n#1 0x560936ff28c3 <unknown>\n#2 0x560937045b1e <unknown>\n#3 0x560937038b1b <unknown>\n#4 0x56093706a3e2 <unknown>\n#5 0x56093703849a <unknown>\n#6 0x56093706a5ae <unknown>\n#7 0x56093709014f <unknown>\n#8 0x56093706a1b3 <unknown>\n#9 0x56093703659b <unknown>\n#10 0x560937037971 <unknown>\n#11 0x5609375181eb <unknown>\n#12 0x56093751bf39 <unknown>\n#13 0x5609374ff2c9 <unknown>\n#14 0x56093751cae8 <unknown>\n#15 0x5609374e3baf <unknown>\n#16 0x5609375400a8 <unknown>\n#17 0x560937540286 <unknown>\n#18 0x560937551ff6 <unknown>\n#19 0x7fa1b669caa4 <unknown>\n#20 0x7fa1b6729c3c <unknown>","statusTrace":"self = <tests.test_03_credentials.TestCredentials object at 0x7f83422cdf10>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ac61a742ad1af7a8d0849defedafdf8c\")>\nconfig = {'browser': 'chrome', 'client': 'MMT', 'env': 'QA', 'execution': 'local', ...}\nmodule = 'airline'\n\n    @pytest.mark.parametrize(\"module\", [\"gst\", \"airline\", \"email\"])\n    @pytest.mark.smoke\n    def test_toggle_buttons_expand_and_collapse(self, driver, config, module):\n        login_page = LoginPage(driver)\n        dashboard_page = login_page.login(config[\"username\"], config[\"password\"])\n        credentials_page = dashboard_page.go_to_credentials()\n        credentials_page.select_module(module)\n        if not credentials_page.has_table_headings():\n            pytest.skip(f\"No table headings for module '{module}', so no toggle buttons to test.\")\n        count = credentials_page.get_toggle_button_count()\n        if count == 0:\n            pytest.skip(f\"No toggle buttons present for module '{module}'.\")\n        for idx in range(count):\n            # Expand\n>           state = credentials_page.click_toggle_button_and_wait(index=idx, expected_state=\"true\")\n\nsrc/tests/test_03_credentials.py:125: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/pages/credentials_page.py:179: in click_toggle_button_and_wait\n    button.click()\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:448: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f834221e220>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#18 0x560937551ff6 \\\\u003Cunknown>\\\\n#19 0x7fa1b669caa4 \\\\u003Cunknown>\\\\n#20 0x7fa1b6729c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=139.0.7258.127)\nE       Stacktrace:\nE       #0 0x56093755301a <unknown>\nE       #1 0x560936ff28c3 <unknown>\nE       #2 0x560937045b1e <unknown>\nE       #3 0x560937038b1b <unknown>\nE       #4 0x56093706a3e2 <unknown>\nE       #5 0x56093703849a <unknown>\nE       #6 0x56093706a5ae <unknown>\nE       #7 0x56093709014f <unknown>\nE       #8 0x56093706a1b3 <unknown>\nE       #9 0x56093703659b <unknown>\nE       #10 0x560937037971 <unknown>\nE       #11 0x5609375181eb <unknown>\nE       #12 0x56093751bf39 <unknown>\nE       #13 0x5609374ff2c9 <unknown>\nE       #14 0x56093751cae8 <unknown>\nE       #15 0x5609374e3baf <unknown>\nE       #16 0x5609375400a8 <unknown>\nE       #17 0x560937540286 <unknown>\nE       #18 0x560937551ff6 <unknown>\nE       #19 0x7fa1b669caa4 <unknown>\nE       #20 0x7fa1b6729c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementNotInteractableException","steps":[{"name":"Enter email and password and click Sign In.","time":{"start":1756129924430,"stop":1756129935523,"duration":11093},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"username","value":"'sumit@kgrp.in'"},{"name":"password","value":"'HRzyUJi0'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"97f297dfa2f1e724","name":"test_toggle_buttons_expand_and_collapse[airline]_2025-08-25_13-52-29.png","source":"97f297dfa2f1e724.png","type":"image/png","size":45297}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1756129949169,"stop":1756129949239,"duration":70},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"smoke"},{"name":"tag","value":"parametrize"},{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"src.tests"},{"name":"suite","value":"test_03_credentials"},{"name":"subSuite","value":"TestCredentials"},{"name":"host","value":"pkrvmqc4gcfdwos"},{"name":"thread","value":"2246-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"src.tests.test_03_credentials"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"module","value":"'airline'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":["broken"],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":5,"unknown":0,"total":6},"items":[{"uid":"4dad8f5b33554d59","status":"passed","time":{"start":1754371412452,"stop":1754371426879,"duration":14427}},{"uid":"10e262116f294be6","status":"passed","time":{"start":1753858000385,"stop":1753858012772,"duration":12387}},{"uid":"d7e6749e523df7fa","status":"passed","time":{"start":1753682868144,"stop":1753682884268,"duration":16124}},{"uid":"a68d8443098b3e4d","status":"passed","time":{"start":1753442770481,"stop":1753442786057,"duration":15576}},{"uid":"755922407b263a07","status":"passed","time":{"start":1753438805668,"stop":1753438817889,"duration":12221}}]},"tags":["smoke","parametrize"]},"source":"f3d68e880e4a3b3c.json","parameterValues":["'airline'"]}