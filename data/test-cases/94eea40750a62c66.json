{"uid":"94eea40750a62c66","name":"Login with invalid credentials","fullName":"src.tests.test_02_dashboard.TestDashBoard#test_switch_workspace","historyId":"f3e59f57a91369ee93c1ed634e0ae7e8","time":{"start":1756129345734,"stop":1756129366454,"duration":20720},"status":"broken","statusMessage":"Exception: [CLICK ERROR] Element not clickable: ('xpath', '(//span[@class=\"ant-avatar-string\"])[1]')","statusTrace":"self = <pages.login_page.LoginPage object at 0x7f83422e41f0>\nlocator = ('xpath', '(//span[@class=\"ant-avatar-string\"])[1]')\n\n    def click(self, locator):\n        try:\n>           element = self.wait.until(EC.element_to_be_clickable(locator))\n\nsrc/utils/browser_utility.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"eece49d0b3e0e88530b1f46a99ab4620\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f83423c0d30>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55f137c2801a <unknown>\nE       #1 0x55f1376c7a70 <unknown>\nE       #2 0x55f137719907 <unknown>\nE       #3 0x55f137719b01 <unknown>\nE       #4 0x55f137767d54 <unknown>\nE       #5 0x55f13773f40d <unknown>\nE       #6 0x55f13776514f <unknown>\nE       #7 0x55f13773f1b3 <unknown>\nE       #8 0x55f13770b59b <unknown>\nE       #9 0x55f13770c971 <unknown>\nE       #10 0x55f137bed1eb <unknown>\nE       #11 0x55f137bf0f39 <unknown>\nE       #12 0x55f137bd42c9 <unknown>\nE       #13 0x55f137bf1ae8 <unknown>\nE       #14 0x55f137bb8baf <unknown>\nE       #15 0x55f137c150a8 <unknown>\nE       #16 0x55f137c15286 <unknown>\nE       #17 0x55f137c26ff6 <unknown>\nE       #18 0x7fb70d89caa4 <unknown>\nE       #19 0x7fb70d929c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_02_dashboard.TestDashBoard object at 0x7f8342313e50>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"eece49d0b3e0e88530b1f46a99ab4620\")>\nconfig = {'browser': 'chrome', 'client': 'MMT', 'env': 'QA', 'execution': 'local', ...}\n\n    @allure.title(\"Login with invalid credentials\")\n    @pytest.mark.smoke\n    def test_switch_workspace(self, driver, config):\n        print(\"Switching workspace\")\n        login_page = LoginPage(driver)\n>       dashboard_page = login_page.login(config[\"username\"], config[\"password\"])\n\nsrc/tests/test_02_dashboard.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/pages/login_page.py:37: in login\n    self.click(self.PROFILE_ICON)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.login_page.LoginPage object at 0x7f83422e41f0>\nlocator = ('xpath', '(//span[@class=\"ant-avatar-string\"])[1]')\n\n    def click(self, locator):\n        try:\n            element = self.wait.until(EC.element_to_be_clickable(locator))\n            self.driver.execute_script(\"arguments[0].scrollIntoView({block: 'center'});\", element)\n            try:\n                element.click()\n            except ElementClickInterceptedException:\n                self.driver.execute_script(\"arguments[0].click();\", element)\n            return self\n        except TimeoutException:\n>           raise Exception(f\"[CLICK ERROR] Element not clickable: {locator}\")\nE           Exception: [CLICK ERROR] Element not clickable: ('xpath', '(//span[@class=\"ant-avatar-string\"])[1]')\n\nsrc/utils/browser_utility.py:32: Exception","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"config","time":{"start":1756129298633,"stop":1756129298638,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1756129343125,"stop":1756129345732,"duration":2607},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"Exception: [CLICK ERROR] Element not clickable: ('xpath', '(//span[@class=\"ant-avatar-string\"])[1]')","statusTrace":"self = <pages.login_page.LoginPage object at 0x7f83422e41f0>\nlocator = ('xpath', '(//span[@class=\"ant-avatar-string\"])[1]')\n\n    def click(self, locator):\n        try:\n>           element = self.wait.until(EC.element_to_be_clickable(locator))\n\nsrc/utils/browser_utility.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"eece49d0b3e0e88530b1f46a99ab4620\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f83423c0d30>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55f137c2801a <unknown>\nE       #1 0x55f1376c7a70 <unknown>\nE       #2 0x55f137719907 <unknown>\nE       #3 0x55f137719b01 <unknown>\nE       #4 0x55f137767d54 <unknown>\nE       #5 0x55f13773f40d <unknown>\nE       #6 0x55f13776514f <unknown>\nE       #7 0x55f13773f1b3 <unknown>\nE       #8 0x55f13770b59b <unknown>\nE       #9 0x55f13770c971 <unknown>\nE       #10 0x55f137bed1eb <unknown>\nE       #11 0x55f137bf0f39 <unknown>\nE       #12 0x55f137bd42c9 <unknown>\nE       #13 0x55f137bf1ae8 <unknown>\nE       #14 0x55f137bb8baf <unknown>\nE       #15 0x55f137c150a8 <unknown>\nE       #16 0x55f137c15286 <unknown>\nE       #17 0x55f137c26ff6 <unknown>\nE       #18 0x7fb70d89caa4 <unknown>\nE       #19 0x7fb70d929c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_02_dashboard.TestDashBoard object at 0x7f8342313e50>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"eece49d0b3e0e88530b1f46a99ab4620\")>\nconfig = {'browser': 'chrome', 'client': 'MMT', 'env': 'QA', 'execution': 'local', ...}\n\n    @allure.title(\"Login with invalid credentials\")\n    @pytest.mark.smoke\n    def test_switch_workspace(self, driver, config):\n        print(\"Switching workspace\")\n        login_page = LoginPage(driver)\n>       dashboard_page = login_page.login(config[\"username\"], config[\"password\"])\n\nsrc/tests/test_02_dashboard.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/pages/login_page.py:37: in login\n    self.click(self.PROFILE_ICON)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.login_page.LoginPage object at 0x7f83422e41f0>\nlocator = ('xpath', '(//span[@class=\"ant-avatar-string\"])[1]')\n\n    def click(self, locator):\n        try:\n            element = self.wait.until(EC.element_to_be_clickable(locator))\n            self.driver.execute_script(\"arguments[0].scrollIntoView({block: 'center'});\", element)\n            try:\n                element.click()\n            except ElementClickInterceptedException:\n                self.driver.execute_script(\"arguments[0].click();\", element)\n            return self\n        except TimeoutException:\n>           raise Exception(f\"[CLICK ERROR] Element not clickable: {locator}\")\nE           Exception: [CLICK ERROR] Element not clickable: ('xpath', '(//span[@class=\"ant-avatar-string\"])[1]')\n\nsrc/utils/browser_utility.py:32: Exception","steps":[{"name":"Enter email and password and click Sign In.","time":{"start":1756129345735,"stop":1756129366453,"duration":20718},"status":"broken","statusMessage":"Exception: [CLICK ERROR] Element not clickable: ('xpath', '(//span[@class=\"ant-avatar-string\"])[1]')\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.9.23/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/selenium-python-finkraft-partnerportal-UI/selenium-python-finkraft-partnerportal-UI/src/pages/login_page.py\", line 37, in login\n    self.click(self.PROFILE_ICON)\n  File \"/home/runner/work/selenium-python-finkraft-partnerportal-UI/selenium-python-finkraft-partnerportal-UI/src/utils/browser_utility.py\", line 32, in click\n    raise Exception(f\"[CLICK ERROR] Element not clickable: {locator}\")\n","steps":[],"attachments":[],"parameters":[{"name":"username","value":"'sumit@kgrp.in'"},{"name":"password","value":"'HRzyUJi0'"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"4a79f9262103b41a","name":"test_switch_workspace_2025-08-25_13-42-46.png","source":"4a79f9262103b41a.png","type":"image/png","size":36821}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1756129366547,"stop":1756129366612,"duration":65},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"smoke"},{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"src.tests"},{"name":"suite","value":"test_02_dashboard"},{"name":"subSuite","value":"TestDashBoard"},{"name":"host","value":"pkrvmqc4gcfdwos"},{"name":"thread","value":"2246-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"src.tests.test_02_dashboard"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":["broken"],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":5,"unknown":0,"total":6},"items":[{"uid":"9f3aa925cf03d4db","status":"passed","time":{"start":1754370705773,"stop":1754370720143,"duration":14370}},{"uid":"9db7c4f42bb88e35","status":"passed","time":{"start":1753857373686,"stop":1753857391365,"duration":17679}},{"uid":"ad651c20d6f8f5a5","status":"passed","time":{"start":1753682337524,"stop":1753682352212,"duration":14688}},{"uid":"2134edec7331bdc4","status":"passed","time":{"start":1753442140525,"stop":1753442159738,"duration":19213}},{"uid":"dce5ed7041ab5307","status":"passed","time":{"start":1753438244284,"stop":1753438259147,"duration":14863}}]},"tags":["smoke"]},"source":"94eea40750a62c66.json","parameterValues":[]}