{"name": "Login with valid credentials", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 28.883\n  (Session info: chrome=138.0.7204.169)\nStacktrace:\n0   chromedriver                        0x0000000102e04ea4 cxxbridge1$str$ptr + 2722840\n1   chromedriver                        0x0000000102dfcdac cxxbridge1$str$ptr + 2689824\n2   chromedriver                        0x000000010294e3ec cxxbridge1$string$len + 90648\n3   chromedriver                        0x0000000102939200 cxxbridge1$string$len + 4140\n4   chromedriver                        0x0000000102938f78 cxxbridge1$string$len + 3492\n5   chromedriver                        0x0000000102936d30 chromedriver + 191792\n6   chromedriver                        0x00000001029378c0 chromedriver + 194752\n7   chromedriver                        0x0000000102944af0 cxxbridge1$string$len + 51484\n8   chromedriver                        0x000000010295aa08 cxxbridge1$string$len + 141364\n9   chromedriver                        0x0000000102937f1c chromedriver + 196380\n10  chromedriver                        0x000000010295a810 cxxbridge1$string$len + 140860\n11  chromedriver                        0x00000001029d6bf0 cxxbridge1$string$len + 649756\n12  chromedriver                        0x0000000102989834 cxxbridge1$string$len + 333408\n13  chromedriver                        0x0000000102dc7fc0 cxxbridge1$str$ptr + 2473268\n14  chromedriver                        0x0000000102dcb22c cxxbridge1$str$ptr + 2486176\n15  chromedriver                        0x0000000102da9a08 cxxbridge1$str$ptr + 2348924\n16  chromedriver                        0x0000000102dcbae8 cxxbridge1$str$ptr + 2488412\n17  chromedriver                        0x0000000102d9aa98 cxxbridge1$str$ptr + 2287628\n18  chromedriver                        0x0000000102deb9d8 cxxbridge1$str$ptr + 2619212\n19  chromedriver                        0x0000000102debb64 cxxbridge1$str$ptr + 2619608\n20  chromedriver                        0x0000000102dfc9e8 cxxbridge1$str$ptr + 2688860\n21  libsystem_pthread.dylib             0x00000001967c5f94 _pthread_start + 136\n22  libsystem_pthread.dylib             0x00000001967c0d34 thread_start + 8", "trace": "config = {'browser': 'chrome', 'client': 'MMT', 'env': 'QA', 'execution': 'local', ...}\n\n    @pytest.fixture(scope=\"function\")\n    def driver(config):\n        driver = WebDriverFactory.get_driver(\n            browser=config[\"browser\"],\n            headless=config[\"headless\"],\n            execution=config[\"execution\"]\n        )\n>       driver.get(config[\"url\"])\n\nconftest.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:473: in get\n    self.execute(Command.GET, {\"url\": url})\n.venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:448: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1075faf10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 2...0001967c5f94 _pthread_start + 136\\\\n22  libsystem_pthread.dylib             0x00000001967c0d34 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 28.883\nE         (Session info: chrome=138.0.7204.169)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000102e04ea4 cxxbridge1$str$ptr + 2722840\nE       1   chromedriver                        0x0000000102dfcdac cxxbridge1$str$ptr + 2689824\nE       2   chromedriver                        0x000000010294e3ec cxxbridge1$string$len + 90648\nE       3   chromedriver                        0x0000000102939200 cxxbridge1$string$len + 4140\nE       4   chromedriver                        0x0000000102938f78 cxxbridge1$string$len + 3492\nE       5   chromedriver                        0x0000000102936d30 chromedriver + 191792\nE       6   chromedriver                        0x00000001029378c0 chromedriver + 194752\nE       7   chromedriver                        0x0000000102944af0 cxxbridge1$string$len + 51484\nE       8   chromedriver                        0x000000010295aa08 cxxbridge1$string$len + 141364\nE       9   chromedriver                        0x0000000102937f1c chromedriver + 196380\nE       10  chromedriver                        0x000000010295a810 cxxbridge1$string$len + 140860\nE       11  chromedriver                        0x00000001029d6bf0 cxxbridge1$string$len + 649756\nE       12  chromedriver                        0x0000000102989834 cxxbridge1$string$len + 333408\nE       13  chromedriver                        0x0000000102dc7fc0 cxxbridge1$str$ptr + 2473268\nE       14  chromedriver                        0x0000000102dcb22c cxxbridge1$str$ptr + 2486176\nE       15  chromedriver                        0x0000000102da9a08 cxxbridge1$str$ptr + 2348924\nE       16  chromedriver                        0x0000000102dcbae8 cxxbridge1$str$ptr + 2488412\nE       17  chromedriver                        0x0000000102d9aa98 cxxbridge1$str$ptr + 2287628\nE       18  chromedriver                        0x0000000102deb9d8 cxxbridge1$str$ptr + 2619212\nE       19  chromedriver                        0x0000000102debb64 cxxbridge1$str$ptr + 2619608\nE       20  chromedriver                        0x0000000102dfc9e8 cxxbridge1$str$ptr + 2688860\nE       21  libsystem_pthread.dylib             0x00000001967c5f94 _pthread_start + 136\nE       22  libsystem_pthread.dylib             0x00000001967c0d34 thread_start + 8\n\n.venv/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:232: TimeoutException"}, "start": 1753697794257, "stop": 1753697794257, "uuid": "1a8ee962-11c3-4c80-97d0-7396ee6a7a68", "historyId": "c21fdd914d2f94d732a8e6223427fde3", "testCaseId": "c21fdd914d2f94d732a8e6223427fde3", "fullName": "src.tests.test_01_login.TestLogin#test_login_valid_user", "labels": [{"name": "tag", "value": "smoke"}, {"name": "tag", "value": "allure_label"}, {"name": "tag", "value": "allure_label"}, {"name": "tag", "value": "allure_label"}, {"name": "tag", "value": "allure_label"}, {"name": "tag", "value": "allure_label"}, {"name": "feature", "value": "Login"}, {"name": "epic", "value": "User Management"}, {"name": "tag", "value": "all_client"}, {"name": "tag", "value": "smoke"}, {"name": "story", "value": "As an user I can log in"}, {"name": "severity", "value": "critical"}, {"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "src.tests"}, {"name": "suite", "value": "test_01_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "macs-MacBook-Pro.local"}, {"name": "thread", "value": "38095-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.tests.test_01_login"}]}