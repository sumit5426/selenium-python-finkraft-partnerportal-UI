{"uid":"9faa3e762492b6d8","name":"test_login_valid_user","fullName":"src.tests.test_login.TestLogin#test_login_valid_user","historyId":"fae89570fdefee5458b31056e5ebbca1","time":{"start":1747586898394,"stop":1747586898394,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=136.0.7103.114)\nStacktrace:\n0   chromedriver                        0x0000000100c203cc cxxbridge1$str$ptr + 2829900\n1   chromedriver                        0x0000000100c18694 cxxbridge1$str$ptr + 2797844\n2   chromedriver                        0x0000000100755fbc cxxbridge1$string$len + 90140\n3   chromedriver                        0x0000000100730798 chromedriver + 133016\n4   chromedriver                        0x00000001007c5048 cxxbridge1$string$len + 544936\n5   chromedriver                        0x00000001007ddb50 cxxbridge1$string$len + 646064\n6   chromedriver                        0x00000001007913f8 cxxbridge1$string$len + 332888\n7   chromedriver                        0x0000000100be47f0 cxxbridge1$str$ptr + 2585200\n8   chromedriver                        0x0000000100be7ac0 cxxbridge1$str$ptr + 2598208\n9   chromedriver                        0x0000000100bc5dc4 cxxbridge1$str$ptr + 2459716\n10  chromedriver                        0x0000000100be8338 cxxbridge1$str$ptr + 2600376\n11  chromedriver                        0x0000000100bb7650 cxxbridge1$str$ptr + 2400464\n12  chromedriver                        0x0000000100c0829c cxxbridge1$str$ptr + 2731292\n13  chromedriver                        0x0000000100c08428 cxxbridge1$str$ptr + 2731688\n14  chromedriver                        0x0000000100c182e0 cxxbridge1$str$ptr + 2796896\n15  libsystem_pthread.dylib             0x0000000199ec9f94 _pthread_start + 136\n16  libsystem_pthread.dylib             0x0000000199ec4d34 thread_start + 8","statusTrace":"config = {'browser': 'chrome', 'client': 'YATRA', 'env': 'QA', 'execution': 'local', ...}\n\n    @pytest.fixture(scope=\"function\")\n    def driver(config):\n        driver = WebDriverFactory.get_driver(\n            browser=config[\"browser\"],\n            headless=config[\"headless\"],\n            execution=config[\"execution\"]\n        )\n        driver.get(config[\"url\"])\n>       driver.maximize_window()\n\nconftest.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:641: in maximize_window\n    self.execute(command, None)\n.venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:448: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1074de0d0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...000199ec9f94 _pthread_start + 136\\\\n16  libsystem_pthread.dylib             0x0000000199ec4d34 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=136.0.7103.114)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000100c203cc cxxbridge1$str$ptr + 2829900\nE       1   chromedriver                        0x0000000100c18694 cxxbridge1$str$ptr + 2797844\nE       2   chromedriver                        0x0000000100755fbc cxxbridge1$string$len + 90140\nE       3   chromedriver                        0x0000000100730798 chromedriver + 133016\nE       4   chromedriver                        0x00000001007c5048 cxxbridge1$string$len + 544936\nE       5   chromedriver                        0x00000001007ddb50 cxxbridge1$string$len + 646064\nE       6   chromedriver                        0x00000001007913f8 cxxbridge1$string$len + 332888\nE       7   chromedriver                        0x0000000100be47f0 cxxbridge1$str$ptr + 2585200\nE       8   chromedriver                        0x0000000100be7ac0 cxxbridge1$str$ptr + 2598208\nE       9   chromedriver                        0x0000000100bc5dc4 cxxbridge1$str$ptr + 2459716\nE       10  chromedriver                        0x0000000100be8338 cxxbridge1$str$ptr + 2600376\nE       11  chromedriver                        0x0000000100bb7650 cxxbridge1$str$ptr + 2400464\nE       12  chromedriver                        0x0000000100c0829c cxxbridge1$str$ptr + 2731292\nE       13  chromedriver                        0x0000000100c08428 cxxbridge1$str$ptr + 2731688\nE       14  chromedriver                        0x0000000100c182e0 cxxbridge1$str$ptr + 2796896\nE       15  libsystem_pthread.dylib             0x0000000199ec9f94 _pthread_start + 136\nE       16  libsystem_pthread.dylib             0x0000000199ec4d34 thread_start + 8\n\n.venv/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:232: NoSuchWindowException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"config","time":{"start":1747586889544,"stop":1747586889547,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false},{"name":"driver","time":{"start":1747586898395,"stop":1747586923083,"duration":24688},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=136.0.7103.114)\nStacktrace:\n0   chromedriver                        0x0000000100c203cc cxxbridge1$str$ptr + 2829900\n1   chromedriver                        0x0000000100c18694 cxxbridge1$str$ptr + 2797844\n2   chromedriver                        0x0000000100755fbc cxxbridge1$string$len + 90140\n3   chromedriver                        0x0000000100730798 chromedriver + 133016\n4   chromedriver                        0x00000001007c5048 cxxbridge1$string$len + 544936\n5   chromedriver                        0x00000001007ddb50 cxxbridge1$string$len + 646064\n6   chromedriver                        0x00000001007913f8 cxxbridge1$string$len + 332888\n7   chromedriver                        0x0000000100be47f0 cxxbridge1$str$ptr + 2585200\n8   chromedriver                        0x0000000100be7ac0 cxxbridge1$str$ptr + 2598208\n9   chromedriver                        0x0000000100bc5dc4 cxxbridge1$str$ptr + 2459716\n10  chromedriver                        0x0000000100be8338 cxxbridge1$str$ptr + 2600376\n11  chromedriver                        0x0000000100bb7650 cxxbridge1$str$ptr + 2400464\n12  chromedriver                        0x0000000100c0829c cxxbridge1$str$ptr + 2731292\n13  chromedriver                        0x0000000100c08428 cxxbridge1$str$ptr + 2731688\n14  chromedriver                        0x0000000100c182e0 cxxbridge1$str$ptr + 2796896\n15  libsystem_pthread.dylib             0x0000000199ec9f94 _pthread_start + 136\n16  libsystem_pthread.dylib             0x0000000199ec4d34 thread_start + 8\n\n","statusTrace":"  File \"/Users/sumit/PycharmProjects/PartnerPortalUI/.venv/lib/python3.9/site-packages/pluggy/_callers.py\", line 38, in run_old_style_hookwrapper\n    res = yield\n  File \"/Users/sumit/PycharmProjects/PartnerPortalUI/.venv/lib/python3.9/site-packages/pluggy/_callers.py\", line 139, in _multicall\n    teardown.throw(exception)\n  File \"/Users/sumit/PycharmProjects/PartnerPortalUI/.venv/lib/python3.9/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n  File \"/Users/sumit/PycharmProjects/PartnerPortalUI/.venv/lib/python3.9/site-packages/pluggy/_callers.py\", line 121, in _multicall\n    res = hook_impl.function(*args)\n  File \"/Users/sumit/PycharmProjects/PartnerPortalUI/.venv/lib/python3.9/site-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/Users/sumit/PycharmProjects/PartnerPortalUI/.venv/lib/python3.9/site-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/Users/sumit/PycharmProjects/PartnerPortalUI/conftest.py\", line 70, in driver\n    driver.maximize_window()\n  File \"/Users/sumit/PycharmProjects/PartnerPortalUI/.venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py\", line 641, in maximize_window\n    self.execute(command, None)\n  File \"/Users/sumit/PycharmProjects/PartnerPortalUI/.venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py\", line 448, in execute\n    self.error_handler.check_response(response)\n  File \"/Users/sumit/PycharmProjects/PartnerPortalUI/.venv/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":0,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=136.0.7103.114)\nStacktrace:\n0   chromedriver                        0x0000000100c203cc cxxbridge1$str$ptr + 2829900\n1   chromedriver                        0x0000000100c18694 cxxbridge1$str$ptr + 2797844\n2   chromedriver                        0x0000000100755fbc cxxbridge1$string$len + 90140\n3   chromedriver                        0x0000000100730798 chromedriver + 133016\n4   chromedriver                        0x00000001007c5048 cxxbridge1$string$len + 544936\n5   chromedriver                        0x00000001007ddb50 cxxbridge1$string$len + 646064\n6   chromedriver                        0x00000001007913f8 cxxbridge1$string$len + 332888\n7   chromedriver                        0x0000000100be47f0 cxxbridge1$str$ptr + 2585200\n8   chromedriver                        0x0000000100be7ac0 cxxbridge1$str$ptr + 2598208\n9   chromedriver                        0x0000000100bc5dc4 cxxbridge1$str$ptr + 2459716\n10  chromedriver                        0x0000000100be8338 cxxbridge1$str$ptr + 2600376\n11  chromedriver                        0x0000000100bb7650 cxxbridge1$str$ptr + 2400464\n12  chromedriver                        0x0000000100c0829c cxxbridge1$str$ptr + 2731292\n13  chromedriver                        0x0000000100c08428 cxxbridge1$str$ptr + 2731688\n14  chromedriver                        0x0000000100c182e0 cxxbridge1$str$ptr + 2796896\n15  libsystem_pthread.dylib             0x0000000199ec9f94 _pthread_start + 136\n16  libsystem_pthread.dylib             0x0000000199ec4d34 thread_start + 8","statusTrace":"config = {'browser': 'chrome', 'client': 'YATRA', 'env': 'QA', 'execution': 'local', ...}\n\n    @pytest.fixture(scope=\"function\")\n    def driver(config):\n        driver = WebDriverFactory.get_driver(\n            browser=config[\"browser\"],\n            headless=config[\"headless\"],\n            execution=config[\"execution\"]\n        )\n        driver.get(config[\"url\"])\n>       driver.maximize_window()\n\nconftest.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:641: in maximize_window\n    self.execute(command, None)\n.venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:448: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1074de0d0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...000199ec9f94 _pthread_start + 136\\\\n16  libsystem_pthread.dylib             0x0000000199ec4d34 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=136.0.7103.114)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000100c203cc cxxbridge1$str$ptr + 2829900\nE       1   chromedriver                        0x0000000100c18694 cxxbridge1$str$ptr + 2797844\nE       2   chromedriver                        0x0000000100755fbc cxxbridge1$string$len + 90140\nE       3   chromedriver                        0x0000000100730798 chromedriver + 133016\nE       4   chromedriver                        0x00000001007c5048 cxxbridge1$string$len + 544936\nE       5   chromedriver                        0x00000001007ddb50 cxxbridge1$string$len + 646064\nE       6   chromedriver                        0x00000001007913f8 cxxbridge1$string$len + 332888\nE       7   chromedriver                        0x0000000100be47f0 cxxbridge1$str$ptr + 2585200\nE       8   chromedriver                        0x0000000100be7ac0 cxxbridge1$str$ptr + 2598208\nE       9   chromedriver                        0x0000000100bc5dc4 cxxbridge1$str$ptr + 2459716\nE       10  chromedriver                        0x0000000100be8338 cxxbridge1$str$ptr + 2600376\nE       11  chromedriver                        0x0000000100bb7650 cxxbridge1$str$ptr + 2400464\nE       12  chromedriver                        0x0000000100c0829c cxxbridge1$str$ptr + 2731292\nE       13  chromedriver                        0x0000000100c08428 cxxbridge1$str$ptr + 2731688\nE       14  chromedriver                        0x0000000100c182e0 cxxbridge1$str$ptr + 2796896\nE       15  libsystem_pthread.dylib             0x0000000199ec9f94 _pthread_start + 136\nE       16  libsystem_pthread.dylib             0x0000000199ec4d34 thread_start + 8\n\n.venv/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:232: NoSuchWindowException","steps":[],"attachments":[{"uid":"6c0b74302d94d7e5","name":"log","source":"6c0b74302d94d7e5.txt","type":"text/plain","size":7848}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":1,"attachmentStep":false},"afterStages":[],"labels":[{"name":"parentSuite","value":"src.tests"},{"name":"suite","value":"test_login"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"macs-MacBook-Pro.local"},{"name":"thread","value":"89087-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"src.tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"9faa3e762492b6d8.json","parameterValues":[]}