{"name": "test_switch_workspace", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=137.0.7151.120); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n0   chromedriver                        0x0000000104b02654 cxxbridge1$str$ptr + 2723108\n1   chromedriver                        0x0000000104afa8c8 cxxbridge1$str$ptr + 2690968\n2   chromedriver                        0x000000010464e714 cxxbridge1$string$len + 90428\n3   chromedriver                        0x00000001046543c8 cxxbridge1$string$len + 114160\n4   chromedriver                        0x0000000104656998 cxxbridge1$string$len + 123840\n5   chromedriver                        0x00000001046d7afc cxxbridge1$string$len + 652580\n6   chromedriver                        0x00000001046d6de8 cxxbridge1$string$len + 649232\n7   chromedriver                        0x00000001046899c8 cxxbridge1$string$len + 332784\n8   chromedriver                        0x0000000104ac6278 cxxbridge1$str$ptr + 2476360\n9   chromedriver                        0x0000000104ac950c cxxbridge1$str$ptr + 2489308\n10  chromedriver                        0x0000000104aa7a64 cxxbridge1$str$ptr + 2351412\n11  chromedriver                        0x0000000104ac9d94 cxxbridge1$str$ptr + 2491492\n12  chromedriver                        0x0000000104a98d58 cxxbridge1$str$ptr + 2290728\n13  chromedriver                        0x0000000104ae9d60 cxxbridge1$str$ptr + 2622512\n14  chromedriver                        0x0000000104ae9eec cxxbridge1$str$ptr + 2622908\n15  chromedriver                        0x0000000104afa514 cxxbridge1$str$ptr + 2690020\n16  libsystem_pthread.dylib             0x000000018ec0df94 _pthread_start + 136\n17  libsystem_pthread.dylib             0x000000018ec08d34 thread_start + 8", "trace": "self = <tests.test_dashboard.TestDashBoard object at 0x102758520>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c43f5964e1445488f216a0dc2922d37e\")>\nconfig = {'browser': 'chrome', 'client': 'YATRA', 'env': 'QA', 'execution': 'local', ...}\n\n    def test_switch_workspace(self,driver,config):\n        print(\"Switching workspace\")\n        login_page = LoginPage(driver)\n        dashboard_page=login_page.login(config[\"username\"], config[\"password\"])\n>       dashboard_page.switch_workspace(config[\"workspace\"])\n\nsrc/tests/test_dashboard.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/pages/dashboard_page.py:18: in switch_workspace\n    self.click(self.SWITCH_WORKSPACE_LOGO)\nsrc/utils/browser_utility.py:12: in click\n    self.wait.until(EC.element_to_be_clickable(locator)).click()\n.venv/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:137: in until\n    value = method(self._driver)\n.venv/lib/python3.9/site-packages/selenium/webdriver/support/expected_conditions.py:634: in _predicate\n    element = visibility_of(target)(driver)\n.venv/lib/python3.9/site-packages/selenium/webdriver/support/expected_conditions.py:260: in _predicate\n    return _element_if_visible(element)\n.venv/lib/python3.9/site-packages/selenium/webdriver/support/expected_conditions.py:280: in _element_if_visible\n    return element if element.is_displayed() == visibility else False\n.venv/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:340: in is_displayed\n    return self.parent.execute_script(f\"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);\", self)\n.venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:547: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n.venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:448: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1027584c0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...00018ec0df94 _pthread_start + 136\\\\n17  libsystem_pthread.dylib             0x000000018ec08d34 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=137.0.7151.120); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104b02654 cxxbridge1$str$ptr + 2723108\nE       1   chromedriver                        0x0000000104afa8c8 cxxbridge1$str$ptr + 2690968\nE       2   chromedriver                        0x000000010464e714 cxxbridge1$string$len + 90428\nE       3   chromedriver                        0x00000001046543c8 cxxbridge1$string$len + 114160\nE       4   chromedriver                        0x0000000104656998 cxxbridge1$string$len + 123840\nE       5   chromedriver                        0x00000001046d7afc cxxbridge1$string$len + 652580\nE       6   chromedriver                        0x00000001046d6de8 cxxbridge1$string$len + 649232\nE       7   chromedriver                        0x00000001046899c8 cxxbridge1$string$len + 332784\nE       8   chromedriver                        0x0000000104ac6278 cxxbridge1$str$ptr + 2476360\nE       9   chromedriver                        0x0000000104ac950c cxxbridge1$str$ptr + 2489308\nE       10  chromedriver                        0x0000000104aa7a64 cxxbridge1$str$ptr + 2351412\nE       11  chromedriver                        0x0000000104ac9d94 cxxbridge1$str$ptr + 2491492\nE       12  chromedriver                        0x0000000104a98d58 cxxbridge1$str$ptr + 2290728\nE       13  chromedriver                        0x0000000104ae9d60 cxxbridge1$str$ptr + 2622512\nE       14  chromedriver                        0x0000000104ae9eec cxxbridge1$str$ptr + 2622908\nE       15  chromedriver                        0x0000000104afa514 cxxbridge1$str$ptr + 2690020\nE       16  libsystem_pthread.dylib             0x000000018ec0df94 _pthread_start + 136\nE       17  libsystem_pthread.dylib             0x000000018ec08d34 thread_start + 8\n\n.venv/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:232: StaleElementReferenceException"}, "steps": [{"name": "Enter email and password", "status": "passed", "parameters": [{"name": "username", "value": "'sumit@kgrp.in'"}, {"name": "password", "value": "'HRzyUJi0'"}], "start": 1750397524945, "stop": 1750397525427}], "attachments": [{"name": "test_switch_workspace_2025-06-20_11-02-11.png", "source": "3b7f1c9e-cb2f-4ddb-becf-375f95203536-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "a03582d9-347e-49f8-b2ec-04e6ce0e99aa-attachment.txt", "type": "text/plain"}], "start": 1750397524944, "stop": 1750397531123, "uuid": "d53fcac1-1686-42e0-8ea9-bc2eddeee656", "historyId": "f4805e0a5d1b4539db3dec27e8cccaee", "testCaseId": "f4805e0a5d1b4539db3dec27e8cccaee", "fullName": "src.tests.test_dashboard.TestDashBoard#test_switch_workspace", "labels": [{"name": "parentSuite", "value": "src.tests"}, {"name": "suite", "value": "test_dashboard"}, {"name": "subSuite", "value": "TestDashBoard"}, {"name": "host", "value": "macs-MacBook-Pro.local"}, {"name": "thread", "value": "74098-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.tests.test_dashboard"}]}