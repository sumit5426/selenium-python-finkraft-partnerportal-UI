{"name": "Login with invalid credentials", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n0   chromedriver                        0x00000001032b4ea4 cxxbridge1$str$ptr + 2722840\n1   chromedriver                        0x00000001032acdac cxxbridge1$str$ptr + 2689824\n2   chromedriver                        0x0000000102dfe3ec cxxbridge1$string$len + 90648\n3   chromedriver                        0x0000000102e45544 cxxbridge1$string$len + 381808\n4   chromedriver                        0x0000000102e86934 cxxbridge1$string$len + 649056\n5   chromedriver                        0x0000000102e39834 cxxbridge1$string$len + 333408\n6   chromedriver                        0x0000000103277fc0 cxxbridge1$str$ptr + 2473268\n7   chromedriver                        0x000000010327b22c cxxbridge1$str$ptr + 2486176\n8   chromedriver                        0x0000000103259a08 cxxbridge1$str$ptr + 2348924\n9   chromedriver                        0x000000010327bae8 cxxbridge1$str$ptr + 2488412\n10  chromedriver                        0x000000010324aa98 cxxbridge1$str$ptr + 2287628\n11  chromedriver                        0x000000010329b9d8 cxxbridge1$str$ptr + 2619212\n12  chromedriver                        0x000000010329bb64 cxxbridge1$str$ptr + 2619608\n13  chromedriver                        0x00000001032ac9e8 cxxbridge1$str$ptr + 2688860\n14  libsystem_pthread.dylib             0x00000001967c5f94 _pthread_start + 136\n15  libsystem_pthread.dylib             0x00000001967c0d34 thread_start + 8", "trace": "self = <tests.test_dashboard.TestDashBoard object at 0x104b53430>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"09bcd9ab6333f2cb6e6cdc1923fcd76c\")>\nconfig = {'browser': 'chrome', 'client': 'YATRA', 'env': 'QA', 'execution': 'local', ...}\n\n    @allure.title(\"Login with invalid credentials\")\n    @pytest.mark.smoke\n    def test_switch_workspace(self, driver, config):\n        print(\"Switching workspace\")\n        login_page = LoginPage(driver)\n        dashboard_page = login_page.login(config[\"username\"], config[\"password\"])\n>       workspace_name = dashboard_page.switch_workspace(config[\"workspace\"])\n\nsrc/tests/test_dashboard.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/pages/dashboard_page.py:56: in switch_workspace\n    self.click(self.SWITCH_WORKSPACE_LOGO)\nsrc/utils/browser_utility.py:13: in click\n    self.wait.until(EC.element_to_be_clickable(locator)).click()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"09bcd9ab6333f2cb6e6cdc1923fcd76c\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x104ba8e50>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       0   chromedriver                        0x00000001032b4ea4 cxxbridge1$str$ptr + 2722840\nE       1   chromedriver                        0x00000001032acdac cxxbridge1$str$ptr + 2689824\nE       2   chromedriver                        0x0000000102dfe3ec cxxbridge1$string$len + 90648\nE       3   chromedriver                        0x0000000102e45544 cxxbridge1$string$len + 381808\nE       4   chromedriver                        0x0000000102e86934 cxxbridge1$string$len + 649056\nE       5   chromedriver                        0x0000000102e39834 cxxbridge1$string$len + 333408\nE       6   chromedriver                        0x0000000103277fc0 cxxbridge1$str$ptr + 2473268\nE       7   chromedriver                        0x000000010327b22c cxxbridge1$str$ptr + 2486176\nE       8   chromedriver                        0x0000000103259a08 cxxbridge1$str$ptr + 2348924\nE       9   chromedriver                        0x000000010327bae8 cxxbridge1$str$ptr + 2488412\nE       10  chromedriver                        0x000000010324aa98 cxxbridge1$str$ptr + 2287628\nE       11  chromedriver                        0x000000010329b9d8 cxxbridge1$str$ptr + 2619212\nE       12  chromedriver                        0x000000010329bb64 cxxbridge1$str$ptr + 2619608\nE       13  chromedriver                        0x00000001032ac9e8 cxxbridge1$str$ptr + 2688860\nE       14  libsystem_pthread.dylib             0x00000001967c5f94 _pthread_start + 136\nE       15  libsystem_pthread.dylib             0x00000001967c0d34 thread_start + 8\n\n.venv/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException"}, "steps": [{"name": "Enter email and password and click Sign In.", "status": "passed", "parameters": [{"name": "username", "value": "'sumit@kgrp.in'"}, {"name": "password", "value": "'HRzyUJi0'"}], "start": 1752235035325, "stop": 1752235046410}], "attachments": [{"name": "test_switch_workspace_2025-07-11_17-27-36.png", "source": "ac95dc46-3e23-45ba-a9db-67e44b36a0c9-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "54f4b532-1c54-4f69-9864-d4dcf4abb7c6-attachment.txt", "type": "text/plain"}], "start": 1752235035324, "stop": 1752235056431, "uuid": "4c5c5efd-4e8d-4a22-afba-6086d3f53e8c", "historyId": "f4805e0a5d1b4539db3dec27e8cccaee", "testCaseId": "f4805e0a5d1b4539db3dec27e8cccaee", "fullName": "src.tests.test_dashboard.TestDashBoard#test_switch_workspace", "labels": [{"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "src.tests"}, {"name": "suite", "value": "test_dashboard"}, {"name": "subSuite", "value": "TestDashBoard"}, {"name": "host", "value": "macs-MacBook-Pro.local"}, {"name": "thread", "value": "69575-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.tests.test_dashboard"}]}