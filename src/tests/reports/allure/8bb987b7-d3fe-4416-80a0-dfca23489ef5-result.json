{"name": "Scroll down dashboard page till the end", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <tests.test_dashboard.TestDashBoard object at 0x105e69e80>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"35a9fb830550381fa008197e0a26259e\")>\nconfig = {'browser': 'chrome', 'client': 'YATRA', 'env': 'QA', 'execution': 'local', ...}\n\n    @allure.title(\"Scroll down dashboard page till the end\")\n    @pytest.mark.smoke\n    def test_scroll_to_bottom_of_dashboard(self, driver, config):\n    \n        login_page = LoginPage(driver)\n        dashboard_page = login_page.login(config[\"username\"], config[\"password\"])\n>       dashboard_page.find_vertical_scrollable_elements()\n\ntest_dashboard.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../pages/dashboard_page.py:326: in find_vertical_scrollable_elements\n    self.scroll_to_bottom_of_container(selector)\n../utils/browser_utility.py:94: in scroll_to_bottom_of_container\n    self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"35a9fb830550381fa008197e0a26259e\")>\nmethod = <function BrowserUtility.scroll_to_bottom_of_container.<locals>.<lambda> at 0x105eb8ee0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../../.venv/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException"}, "steps": [{"name": "Enter email and password and click Sign In.", "status": "passed", "parameters": [{"name": "username", "value": "'sumit@kgrp.in'"}, {"name": "password", "value": "'HRzyUJi0'"}], "start": 1752237454248, "stop": 1752237464939}], "attachments": [{"name": "test_scroll_to_bottom_of_dashboard_2025-07-11_18-07-55.png", "source": "1e064953-f468-459b-bee1-15aa37ba5db2-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "8fa18226-0fe6-4230-88f1-321153e1684e-attachment.txt", "type": "text/plain"}], "start": 1752237454248, "stop": 1752237475094, "uuid": "013f85f0-794c-43d6-a147-28af2d61f7a5", "historyId": "9b81d0e057fd07827c2c18fce54c41b1", "testCaseId": "9b81d0e057fd07827c2c18fce54c41b1", "fullName": "src.tests.test_dashboard.TestDashBoard#test_scroll_to_bottom_of_dashboard", "labels": [{"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "src.tests"}, {"name": "suite", "value": "test_dashboard"}, {"name": "subSuite", "value": "TestDashBoard"}, {"name": "host", "value": "macs-MacBook-Pro.local"}, {"name": "thread", "value": "71651-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.tests.test_dashboard"}]}